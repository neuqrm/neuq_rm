/*****    目录     *****/
/* 1/  时钟说明
/* 2/  已用的引脚资源汇总
/* 3/  已用的功能资源汇总
/* 4/   NRF24L01（无线通信模块）
/* 5/   LED
/* 6/   ops_v9（定位器）
/* 7/   myflash
/* 8/   power（电机电源管理）
/* 9/   motor
/* 10/  speed_pid
/* 11/  angle_pid
/* 12/  position_pid
/* 13/  TIM3
/* 14/  remote（遥控器）
/* 15/  KEY
/* 16/  BUZZER
/* 17/ 
/* 18/  
/* 19/ 

1/****   时钟说明    ****/
/* 系统时钟：180M
/* AHB = HCLK = 180M
/* PCLK1 = APB1 = 45M
/* PCLK2 = APB2 = 90M
/* 定时器时钟90M



2/****   已用的引脚资源汇总    ****/
/* A 0
/* B     2         7
/* C
/* D 0 1             8 9 
/* E         4 5 6             12
/* F 0 1 
/* G   1 2 3 4 5 6 7 8
/* H     2 3 4 5 6
/* I

3/****   已用的功能资源汇总    ****/
/* USART: USART3(D8，D9)(定位器),USART1(B7)(遥控器)
/* CAN:   CAN1(D0,D1)(电机)
/* SPI:   SPI4(E5，E6，E12)(nrf)
/* TIM:   TIM3(定时器),TIM12_CH1(H6)(蜂鸣器),TIM5_CH1（A0）
/* GPIO:  LED(G1,2,3,4,5,6,7,8),power(H2,3,4,5),nrf(F0,F1,E4),key(B2)
/* DMA:	  DMA2_Stream5_CH4(USART1)


4/****   NRF24L01    ****/
/* 如果使用了nrf，请将use_nrf设为used，此时如果未插上nrf，则蜂鸣器响。
/* 如果不适用nrf，请将use_nrf设为unused，此时不影响程序。
/* NRF单片机引脚：							NRF引脚（引脚在右侧）：
/* I2(PF0)(CE)      I1(PF1)(CSN)			8.IRQ		7.MISO
/* J2(PE4)(IRQ)     J1(PE5)(MISO)			6.MOSI  	5.SCK
/* K2(PE12)(SCK)    K1(PE6)(MOSI)			4.CSN    	3.CE  
/* 											2.VCC		1.GND
/* 注意：如果使用下载线给单片机供电，单片机的电压输出口达不到nrf工作电压，需外接电源
/* NRF的最大输入电压为3.6V，不能直接接在板子上
/* 使用的是软件SPI，因此引脚可以随便取，上面是使用硬件SPI的对应管脚
/* 软件SPI在24l01.h文件中修改引脚



5/****   LED    ****/
/* LED从上到下依次为A B C D E F G H对应PTG8 7 6 5 4 3 2 1
/* LED接VCC，管脚置低电平亮

6/****   ops_v9    ****/
/* 即定位器
/* 使用USART3,占用D8，D9引脚
/* zangle,xangle,yangle为三轴姿态角，其中zangle常用，为水平面内的角度偏移量，范围为-180°到180°，注意角度的边界跃迁
/* pos_x,pos_y为x,y方向的相对位移，单位（mm）
/* w_z为角速度
/* 需要提醒硬件组：额定电压为5V，额定电流为1A（当然自己也要注意）


7/****   myflash    ****/
/* 应用：无线调参
/* 在启动单片机后，通过电脑端的nrf发送如xp=30字样，可以改变flash中的值，下次启动读出所有参数

8/****   power    ****/
/* 电机电源开关，由H2,3,4,5控制，置高电平开启，低电平关闭

9/**** 	 motor   *****/
/* 电机有4个参数：机械转子角度，转速，实际转矩电流，温度
/* 机械转子角度0-8191对应0-360度
/* 转速单位rpm，最大为10000，实际应该是9960左右
/* 实际转矩电流-16384――16384对应-20A――20A
/* 温度单位℃
/* 电流不变且不为零时，电机会加速旋转，加速度值与电流大小成正比


10/*****    speed_pid    ******/
/* 即速度环pid，输入目标速度，输出电流
/* 输入目标速度最大为10000，输出最大为16384
/* PID整体思路：位置环输出给速度环，当位置满足要求后执行角度环，让电机保持角度，即机器人保持位置直到下一个命令到来

11/*****    angle_pid    ******/
/* 即角度环pid，输入目标角度，输出速度
/* 输入对应机械转子角度，输出最大10000
/* 由于电机使用的不是绝对值编码器，因此每次重启电机后角度不一样。
/* 以电机上电后传回的第一个角度为绝对零度，上电后若没有其他命令，保持该角度
/* 以cpu发出停止命令时的角度为停止角度，停止后若没有其他命令，保持该角度


12/******    position_pid   ******/
/* 即位置闭环，输入目标位置，输出速度
/* 目标位置为场地坐标，一般是直接给出，也可以尝试用算法计算
/* 当前位置由读取ops_v9（定位器）得到


13/*****     TIM3     ******/
/* 用于产生定时器中断，中断频率1KHZ，即1ms中断一次
/* time_count用于计数，每隔1s清一次
/* 所有需要定时器完成的任务都放在TIM3中，通过time_count确定其频率
/* 选择频率时，尽量使用质数，用以提高TIM3服务函数执行效率



14/*****    remote    *****/
/* 大疆遥控器，使用DBUS信号，USART1（B7）接收
/* 一帧数据一共18位，但是与遥控器相关的只有前6位
/* 后12位与电脑相关，如果以后做RM可以开发
/* 代码参考大疆例程，但是大疆例程有多处错误
/* 
/* FS-i6S遥控器，使用PPM模式，TIM5_CH1(A0)输入捕获脉宽
/* FS-i6S的缺点是比较耗电，使用的是5号电池，需经常更换电池
/* 实际上大疆的遥控器应该够用，可以多个通道配合使用，从而1+1 > 2
/* 其中变量Control_Mode用到其二进制后两位，最低位为1时选择大疆遥控器，为0时富斯遥控器
/* Control_Mode次低位为1时为自动控制模式，为0时为遥控模式
/* 这种方法还是不提倡。。。。我一时兴起。。。
/*
/* remote_code.c文件专门用来放各种遥控代码，在它的头文件中定义各种脉宽含义，定义的内容需兼容
/*   两款遥控器
/* 波动开关和按键的判断脉宽不要用类似if(width==value)的形式，因为可能有波动，到不了那个值
/* 波动开关和按键的判断使用if(width>min && width<max)的形式，这样兼容性较高


15/******    KEY    ********/
/* 为了减少中断数量，按键扫描放在TIM3定时器中断服务函数中，不使用外部中断
/* 板子上的白色按键是自定义按键（B2），接VCC，因此下拉输入
/* 为了调试方便，可以让硬件组多画一些按键，从主板没用的引脚引出去
/* 按键可以作为模式选择，主要用于在场地不同位置调试，无需从起点出发，节省时间提高效率


16/******    BUZZER   *******/
/* 蜂鸣器，无源蜂鸣器
/* TIM12_CH1(H6)，pwm输入
/* 频率改变音调，占空比改变音高，占空比太小或太大都不能发声
/* 可以在buzzer.c文件中多设置一些提示音，方便自己调试，另外机器人也需要骚气


/*
/* 
/*
/* 
/*